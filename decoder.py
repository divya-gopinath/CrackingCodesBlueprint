import numpy as np
import time

"""
Please note this code is pretty jank because we were trying to make it run as fast as possible...
in real life you will never see (professional) code that looks like this.

If you have any questions, feel free to contact us! 
divyagop@mit.edu
kodialam@mit.edu

Thanks,
Divya and Rohan
"""
def decode(ciphertext, output_file, filename_decoded = None):
    np.seterr(over='ignore')
    # DEFINITION OF CONSTANTS
    NUM_SAMPLES = 100000
    ALPHABET = list('abcdefghijklmnopqrstuvwxyz .') # the alphabet we're using-- everything a-z plus spaces and periods
    LEN_ALPHABET = len(ALPHABET) # should be 28
    ###### CONSTANTS ######
    # First, define transition probabilities-- a 28x28 matrix with probability of going from state 1 to 2
    M = np.array([
        [5.04501000e-04, 5.54097490e-02, 1.13551483e-01, 3.02411820e-02,
         4.99380180e-02, 7.80910620e-02, 5.94468060e-02, 1.89907131e-01,
         1.45998390e-02, 1.57575350e-01, 4.74800700e-03, 7.02785130e-02,
         1.32769720e-01, 1.55120220e-02, 4.70280700e-03, 1.19610115e-01,
         1.00000000e-05, 5.46289060e-02, 4.82646730e-02, 3.21873100e-02,
         2.25309900e-02, 5.22355080e-02, 2.27838623e-01, 7.23050490e-02,
         4.54345400e-03, 3.82135348e-01, 1.15055016e-01, 0.00000000e+00],
        [2.17184990e-02, 5.09415200e-03, 6.46000000e-05, 7.83372000e-04,
         9.36574000e-04, 1.54428000e-04, 1.19349300e-03, 1.82364900e-03,
         6.69256600e-03, 1.00000000e-05, 9.92882000e-04, 7.78414000e-04,
         1.44261630e-02, 4.54380000e-04, 7.80803500e-03, 1.55132300e-03,
         1.00000000e-05, 1.90834600e-03, 1.42624600e-03, 3.10566000e-04,
         1.59431740e-02, 1.00000000e-05, 6.90625500e-03, 2.50981000e-04,
         4.49496700e-03, 1.00000000e-05, 4.65441540e-02, 0.00000000e+00],
        [2.82396300e-02, 3.34000000e-05, 2.06588640e-02, 2.35053000e-04,
         1.93465000e-02, 5.31554000e-04, 2.71993000e-04, 5.61000000e-05,
         3.94891570e-02, 1.00000000e-05, 5.89647000e-04, 1.31538100e-03,
         1.24462000e-04, 3.71583460e-02, 8.33722900e-03, 3.27000000e-05,
         1.00000000e-05, 9.57093900e-03, 1.02712340e-02, 2.78716900e-03,
         5.39871830e-02, 1.00000000e-05, 7.58946000e-04, 1.74361564e-01,
         6.32236000e-04, 4.65451000e-04, 3.71524940e-02, 0.00000000e+00],
        [5.84043760e-02, 6.29446000e-04, 6.46000000e-05, 1.02357320e-02,
         7.88877570e-02, 4.67362000e-04, 4.88816000e-04, 2.55085000e-04,
         4.12651080e-02, 1.00000000e-05, 2.62019000e-04, 9.13636970e-02,
         2.32567000e-04, 1.70835379e-01, 1.74547550e-02, 1.00663000e-04,
         1.00000000e-05, 2.80881180e-02, 5.70657000e-04, 6.97000000e-05,
         1.51102320e-02, 1.00000000e-05, 1.57463200e-03, 1.30489000e-04,
         2.44238600e-03, 1.00000000e-05, 3.03948820e-02, 0.00000000e+00],
        [1.52252000e-04, 4.13743291e-01, 1.71818860e-01, 1.07570491e-01,
         3.14238520e-02, 9.26224370e-02, 1.22370863e-01, 4.32008028e-01,
         3.80902380e-02, 2.78066502e-01, 3.20606930e-01, 1.59377880e-01,
         2.33632008e-01, 9.13165400e-02, 2.59535600e-03, 2.06910381e-01,
         1.00000000e-05, 2.21575339e-01, 1.13406295e-01, 8.34754350e-02,
         2.30105630e-02, 7.66903199e-01, 1.43385420e-01, 8.07394720e-02,
         4.08919150e-02, 3.38411828e-01, 2.26450340e-02, 0.00000000e+00],
        [9.49589400e-03, 3.34000000e-05, 1.00000000e-05, 1.60585000e-03,
         9.44950000e-03, 4.11808890e-02, 2.53924000e-04, 5.66491000e-04,
         2.24317050e-02, 1.00000000e-05, 1.28127050e-02, 2.79692750e-02,
         4.61401300e-03, 6.00017500e-03, 9.16468470e-02, 1.45997000e-04,
         1.00000000e-05, 8.34648800e-03, 2.87753700e-03, 1.69812200e-03,
         4.28198200e-03, 1.00000000e-05, 5.55666500e-03, 6.15507700e-03,
         1.37569100e-03, 1.00000000e-05, 3.44702730e-02, 0.00000000e+00],
        [1.95304880e-02, 1.00000000e-05, 1.00000000e-05, 5.52592000e-03,
         5.61578800e-03, 1.14309000e-04, 1.34530690e-02, 9.07000000e-05,
         2.75099380e-02, 1.00000000e-05, 7.91265000e-04, 1.03764000e-03,
         2.27000000e-05, 1.31516489e-01, 3.11522500e-03, 8.93000000e-05,
         1.00000000e-05, 6.39398600e-03, 1.09043500e-03, 5.94000000e-05,
         5.45172370e-02, 1.00000000e-05, 6.19000000e-05, 1.30489000e-04,
         3.33238000e-04, 1.00000000e-05, 1.60808960e-02, 0.00000000e+00],
        [1.17061400e-03, 3.13878000e-04, 1.79138334e-01, 2.21964000e-03,
         2.04991400e-03, 3.71075000e-04, 1.47757310e-01, 1.05149000e-04,
         9.84000000e-05, 1.00000000e-05, 5.88210500e-03, 1.99787000e-04,
         1.94412000e-04, 1.12737600e-03, 3.28540600e-03, 9.96061800e-03,
         1.00000000e-05, 2.98839000e-03, 8.00528970e-02, 2.93961998e-01,
         3.52000000e-05, 1.00000000e-05, 1.70874051e-01, 1.06132720e-02,
         7.13047000e-04, 4.65451000e-04, 8.34130410e-02, 0.00000000e+00],
        [4.38582800e-02, 2.23802770e-02, 4.13233210e-02, 6.27802160e-02,
         1.24087550e-02, 7.33408840e-02, 4.52177480e-02, 1.33190864e-01,
         3.24624000e-04, 1.85470970e-02, 1.48072805e-01, 1.13161749e-01,
         1.01291987e-01, 2.55555880e-02, 9.81990500e-03, 5.42850810e-02,
         1.00000000e-05, 6.86965470e-02, 5.71622220e-02, 6.19991890e-02,
         3.00842630e-02, 1.30520410e-01, 1.71904782e-01, 1.03873889e-01,
         1.45154420e-02, 6.65061850e-02, 7.58092700e-02, 0.00000000e+00],
        [6.87000000e-05, 1.41521280e-02, 1.00000000e-05, 2.59605000e-04,
         4.08136000e-04, 1.00000000e-05, 2.81000000e-05, 1.58000000e-05,
         1.00000000e-05, 1.00000000e-05, 8.56000000e-05, 1.07207000e-04,
         2.27000000e-05, 1.49469800e-03, 1.19566000e-04, 2.13000000e-05,
         1.00000000e-05, 5.51000000e-05, 2.75000000e-05, 2.23000000e-05,
         2.26000000e-05, 1.00000000e-05, 2.48000000e-05, 1.00000000e-05,
         4.23000000e-05, 1.00000000e-05, 3.68922000e-03, 0.00000000e+00],
        [1.41970700e-02, 1.00000000e-05, 4.07620830e-02, 3.04616000e-04,
         1.16532300e-03, 1.80000000e-05, 5.52000000e-05, 2.73000000e-05,
         7.51423600e-03, 1.00000000e-05, 1.61210000e-04, 1.05456460e-02,
         1.64000000e-05, 1.15228520e-02, 1.37946900e-02, 2.59329000e-04,
         1.00000000e-05, 6.67377500e-03, 4.58579600e-03, 1.21000000e-05,
         1.48821000e-04, 1.00000000e-05, 7.14454000e-04, 1.00000000e-05,
         2.62000000e-05, 1.00000000e-05, 6.05053800e-03, 0.00000000e+00],
        [6.58851610e-02, 1.14035309e-01, 3.12600190e-02, 1.06572010e-02,
         4.18854850e-02, 1.56887970e-02, 2.60830520e-02, 1.15181900e-03,
         4.41487540e-02, 1.00000000e-05, 1.33923550e-02, 1.42023686e-01,
         2.56001200e-03, 1.00227390e-02, 2.16323590e-02, 9.79862140e-02,
         1.00000000e-05, 1.18453480e-02, 5.18149700e-03, 1.64609830e-02,
         1.24124712e-01, 1.00000000e-05, 6.03124600e-03, 1.21491500e-03,
         3.13735500e-03, 2.77926510e-02, 2.42643120e-02, 0.00000000e+00],
        [2.75193250e-02, 1.41252300e-03, 1.78000000e-05, 5.05534800e-03,
         2.06943800e-02, 6.62000000e-05, 1.93430800e-03, 1.82941600e-03,
         4.39459360e-02, 1.00000000e-05, 8.41669000e-04, 5.21301500e-03,
         2.05309350e-02, 4.72361000e-04, 5.60999180e-02, 4.40662000e-04,
         1.00000000e-05, 1.23267040e-02, 5.67207400e-03, 1.31520600e-03,
         1.76090590e-02, 1.00000000e-05, 1.73134000e-04, 1.00000000e-05,
         5.35155600e-03, 1.00000000e-05, 5.65947130e-02, 0.00000000e+00],
        [2.02393115e-01, 9.18000000e-05, 4.12000000e-05, 5.02670400e-03,
         8.31558020e-02, 9.02000000e-05, 1.39770600e-02, 1.17777000e-03,
         2.70165188e-01, 1.00000000e-05, 1.45401374e-01, 2.56984500e-03,
         2.16574500e-03, 1.64059250e-02, 1.38693842e-01, 8.93000000e-05,
         1.00000000e-05, 1.88881930e-02, 1.65109400e-03, 1.31520600e-03,
         1.01546927e-01, 2.78000000e-05, 4.02900750e-02, 1.00000000e-05,
         1.27063700e-03, 1.00000000e-05, 2.59131170e-02, 0.00000000e+00],
        [4.34503000e-04, 8.59146760e-02, 2.17419415e-01, 5.70596970e-02,
         1.81537400e-03, 1.78149729e-01, 7.40282030e-02, 7.88505100e-02,
         4.73652270e-02, 2.41847860e-01, 1.44652100e-03, 7.67822850e-02,
         9.42269850e-02, 8.45865800e-02, 4.08442060e-02, 1.24868757e-01,
         1.00000000e-05, 6.74059100e-02, 5.69402940e-02, 1.13042330e-01,
         1.00700400e-03, 3.98906490e-02, 9.90565720e-02, 7.60097800e-03,
         1.62204301e-01, 1.13963310e-02, 5.82248700e-02, 0.00000000e+00],
        [1.77692410e-02, 1.00000000e-05, 2.56000000e-05, 1.20479000e-04,
         8.95436000e-03, 3.95147000e-04, 5.52057000e-04, 5.61000000e-05,
         4.78920400e-03, 1.00000000e-05, 2.62019000e-04, 2.63002200e-03,
         4.05367830e-02, 6.31619000e-04, 1.61772290e-02, 8.45562760e-02,
         1.00000000e-05, 4.42042500e-03, 2.09938460e-02, 1.41753000e-04,
         4.29885580e-02, 1.00000000e-05, 1.80550000e-04, 2.61959069e-01,
         7.29209000e-04, 1.00000000e-05, 2.54686700e-02, 0.00000000e+00],
        [1.90000000e-05, 1.00000000e-05, 5.73150300e-03, 3.45000000e-05,
         1.88486800e-03, 1.80000000e-05, 1.90000000e-05, 2.44000000e-05,
         1.40008000e-04, 1.00000000e-05, 1.00000000e-05, 1.93000000e-05,
         1.00000000e-05, 1.52809100e-03, 1.10241000e-04, 2.13000000e-05,
         1.00000000e-05, 2.77752000e-04, 5.35615000e-04, 1.82000000e-05,
         4.15000000e-05, 1.00000000e-05, 1.00000000e-05, 7.72146900e-03,
         2.62000000e-05, 1.00000000e-05, 2.45378200e-03, 0.00000000e+00],
        [9.25025750e-02, 5.12021730e-02, 4.10115220e-02, 1.48800740e-02,
         1.54910501e-01, 6.84623210e-02, 6.75234910e-02, 7.01951700e-03,
         3.76143970e-02, 1.00000000e-05, 2.87221000e-04, 2.02825000e-03,
         5.95506060e-02, 1.94165000e-03, 1.08529773e-01, 1.41415348e-01,
         1.00000000e-05, 2.15506960e-02, 5.15175000e-04, 2.30426120e-02,
         1.53706784e-01, 1.00612400e-03, 1.03840450e-02, 1.00000000e-05,
         6.96885000e-04, 1.00000000e-05, 1.87794340e-02, 0.00000000e+00],
        [1.10860191e-01, 1.80558240e-02, 8.67444000e-04, 2.24378700e-02,
         5.70161970e-02, 6.92033000e-04, 2.23247740e-02, 1.76598100e-03,
         1.17636207e-01, 1.00000000e-05, 3.37305140e-02, 1.25314950e-02,
         2.12685950e-02, 3.36495200e-02, 2.48821240e-02, 1.97979060e-02,
         1.00000000e-05, 5.71470020e-02, 5.39442700e-02, 1.56436830e-02,
         1.16697643e-01, 1.00000000e-05, 8.24843000e-03, 4.22720900e-03,
         4.04312970e-02, 1.00000000e-05, 7.44075530e-02, 0.00000000e+00],
        [1.29834243e-01, 1.05523130e-02, 8.59573010e-02, 8.69303000e-04,
         2.82778330e-02, 3.41358600e-02, 3.58758900e-03, 3.11304180e-02,
         1.36173185e-01, 1.00000000e-05, 4.13232000e-04, 1.71882880e-02,
         6.52270000e-04, 8.84986900e-02, 6.05852470e-02, 3.58798330e-02,
         1.00000000e-05, 4.42707180e-02, 1.11099415e-01, 2.53956940e-02,
         1.31785257e-01, 1.00000000e-05, 5.06824000e-04, 1.58215669e-01,
         1.19779990e-02, 9.20904000e-04, 1.33944784e-01, 0.00000000e+00],
        [1.11848850e-02, 1.29369586e-01, 3.20161310e-02, 9.80198800e-03,
         6.25302000e-04, 3.44969380e-02, 1.79702310e-02, 8.02870300e-03,
         4.98839000e-04, 2.99883243e-01, 2.36817000e-04, 1.40775870e-02,
         4.93696260e-02, 4.28429200e-03, 1.50552920e-01, 2.90685310e-02,
         9.98287015e-01, 1.23056450e-02, 3.87568230e-02, 1.54419320e-02,
         2.89000000e-05, 1.11285200e-03, 2.10211000e-04, 1.01313040e-02,
         4.23000000e-05, 3.65362400e-03, 1.02960930e-02, 0.00000000e+00],
        [3.23379170e-02, 1.97001000e-04, 1.00000000e-05, 2.93572800e-03,
         1.97591160e-02, 2.60000000e-05, 1.00000000e-05, 1.86000000e-05,
         1.88720020e-02, 1.00000000e-05, 3.52000000e-05, 4.57883900e-03,
         3.54000000e-05, 4.44355100e-03, 1.40534590e-02, 1.00000000e-05,
         1.00000000e-05, 6.90542800e-03, 5.09000000e-05, 1.82000000e-05,
         3.50746000e-04, 1.00000000e-05, 1.74000000e-05, 3.50425800e-03,
         9.15072000e-04, 4.65451000e-04, 6.99693000e-03, 0.00000000e+00],
        [1.24809830e-02, 1.03499000e-04, 1.00000000e-05, 2.33421400e-03,
         5.82716300e-03, 2.82812000e-04, 3.44267000e-04, 1.69966300e-03,
         3.08000000e-05, 1.00000000e-05, 2.68142800e-03, 7.05536500e-03,
         1.18103000e-04, 1.23526100e-03, 4.88124250e-02, 4.97328000e-04,
         1.00000000e-05, 2.88008500e-03, 4.53031400e-03, 6.84278700e-03,
         9.20000000e-05, 1.00000000e-05, 1.43473000e-04, 7.32948000e-04,
         1.47266300e-03, 1.68617710e-02, 7.37074720e-02, 0.00000000e+00],
        [8.04816000e-04, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,
         9.26418500e-03, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,
         1.70534100e-03, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,
         1.00000000e-05, 1.00921600e-03, 7.25692000e-04, 1.00000000e-05,
         1.00000000e-05, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,
         5.02190000e-04, 1.00000000e-05, 1.00000000e-05, 4.22720900e-03,
         1.81000000e-05, 1.00000000e-05, 7.07000000e-05, 0.00000000e+00],
        [3.08227920e-02, 7.43321540e-02, 1.15309580e-02, 1.47614080e-02,
         1.30703890e-02, 2.36903900e-03, 1.91623900e-03, 3.38932900e-03,
         1.26000000e-05, 1.00000000e-05, 5.93251000e-03, 9.82748230e-02,
         6.85297090e-02, 1.82630860e-02, 3.31338100e-03, 1.21819410e-02,
         1.70337000e-04, 4.37562680e-02, 2.56216600e-03, 1.52175350e-02,
         4.83260000e-04, 7.24970500e-03, 4.77163000e-04, 1.57639000e-03,
         2.03942000e-04, 5.60307580e-02, 1.75463270e-02, 0.00000000e+00],
        [7.68688000e-04, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,
         9.11000000e-05, 1.00000000e-05, 3.71000000e-05, 1.00000000e-05,
         3.55409900e-03, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,
         1.00000000e-05, 5.37000000e-05, 1.98829000e-04, 1.00000000e-05,
         1.00000000e-05, 2.20000000e-05, 1.00000000e-05, 1.23225000e-04,
         4.13848000e-04, 1.00000000e-05, 1.74000000e-05, 1.00000000e-05,
         1.81000000e-05, 8.19915980e-02, 2.64000000e-05, 0.00000000e+00],
        [6.61809600e-02, 2.49948000e-03, 5.59119300e-03, 6.09126635e-01,
         3.26153506e-01, 3.69898081e-01, 3.62656744e-01, 1.02058910e-01,
         7.45609420e-02, 1.00000000e-05, 2.82929670e-01, 1.31585247e-01,
         1.38829979e-01, 2.29031548e-01, 1.49692688e-01, 5.57810750e-02,
         1.70337000e-04, 2.54671600e-01, 3.52142106e-01, 2.76419907e-01,
         8.43454060e-02, 5.61425000e-04, 9.87154670e-02, 8.14624230e-02,
         6.63696708e-01, 1.27626910e-02, 0.00000000e+00, 1.00000000e+00],
        [8.61267000e-04, 3.84004000e-04, 1.07790800e-03, 2.31171310e-02,
         1.49843500e-02, 8.30676200e-03, 1.64886020e-02, 3.73245300e-03,
         7.61461000e-04, 3.86001000e-03, 1.73742990e-02, 7.28681600e-03,
         1.42481070e-02, 1.14483600e-02, 2.41584900e-03, 4.41864400e-03,
         1.13237700e-03, 3.23902400e-02, 2.56689280e-02, 1.29673870e-02,
         4.60380000e-03, 3.12393000e-04, 5.92743100e-03, 8.80589500e-03,
         3.77968820e-02, 1.00000000e-05, 0.00000000e+00, 0.00000000e+00]
    ]).T

    # Define the probabilities we start at a particular state (28x1 matrix that sums up to 1)
    # For example, look at the fifth number... this corresponds to the letter 'e', and the value
    # is high because 'e' appears fairly often 
    P = np.array([0.06430847, 0.01242408, 0.01862858, 0.0354867, 0.10029802,
                  0.01809696, 0.01607305, 0.05036057, 0.05584491, 0.00101835,
                  0.00576177, 0.03136931, 0.02283472, 0.05653049, 0.06228804,
                  0.01281263, 0.00090563, 0.04826665, 0.04972742, 0.07053475,
                  0.02301192, 0.00816333, 0.01958229, 0.00120514, 0.01796914,
                  0.00031882, 0.18694402, 0.00923426])
    log_M = np.log(M + 1e-10) # add a tiny bit to avoid dividing by zero errors 

    text = ciphertext.replace('\n', '') # clean the text up by deleting newlines so the computer can process

    ##### ALGORITHM #####
    alph_dict = {a: i for i, a in enumerate(ALPHABET)} 
    text_num = np.array([alph_dict[i] for i in text])
    alph_num = np.array(list(range(0, LEN_ALPHABET)))

    transition_counts = np.zeros((LEN_ALPHABET, LEN_ALPHABET))
    converged_states = {}

    def apply_decode(txt, key):
        """
        Iterates through the text we are trying to decode with the proposed
        encoding (key), and finds what letter of the alphabet each character in the
        decoded text maps to using the key.
        Returns the decoded text using our proposed mapping (key)
        """
        return ''.join([ALPHABET[list(key).index(i)] for i in txt])

    def get_log_prior(guess):
        """
        Returns the log likelihood of a piece of text occurring--
        similar to the proposed "Englishness" we discussed in the tech talk. 
        """
        shifted = transition_counts[guess, :]
        shifted = shifted[:, guess]
        ll_elems = log_M * shifted
        log_likelihood = np.log(P[guess[text_num[0]]]) + np.sum(ll_elems)
        return log_likelihood

    f_init = np.array(list(range(0, LEN_ALPHABET)))
    text_dict = {}
    for i in range(1,len(text_num)):
        transition_counts[text_num[i - 1], text_num[i]] += 1
        text_dict[text_num[i]] = text_dict.get(text_num[i], 0) + 1
    text_dict[text_num[0]] = text_dict.get(text_num[0], 0) + 1

    td_zip = sorted([(text_dict.get(i, 0), i) for i in range(LEN_ALPHABET)])
    p_zip = sorted([(P[i], i) for i in range(LEN_ALPHABET)])
    for i, j in enumerate(td_zip):
        f_init[j[1]] = p_zip[i][1]


    n_samples = 8

    def get_state():
        """
        This is performing ONE iteration of our MCMC algorithm-- meaning
        we will call this method and start proposing swaps. When the method returns,
        we will have a guess at what the encoding could be. 
        """
        f = f_init.copy()
        i = 0
        lpf = None
        rej_count = 0 # rej_count and lpf_rej_count used to keep track of how often we "reject" swaps
        lpf_rej_count = 0 # used for smarter convergence criteria
        while i < NUM_SAMPLES + 1:
            a, b = np.random.choice(alph_num, size=2, replace=False)
            g = f.copy()
            temp = g[b]
            g[b] = g[a]
            g[a] = temp # Here we are proposing a swap-- pick a random state a and b to switch 
            if lpf is None:
                lpf = get_log_prior(f) 
            lpg = get_log_prior(g)
            accept = min(1, np.exp(lpg - lpf)) # accept variable determines threshold for us "accepting" the swap
            if np.random.random() < accept: 
                f = g # finish the swap if we have decided to accept it 
                lpf = lpg
                rej_count = 0
            else:
                rej_count += 1 # otherwise, keep track we've rejected it
            i += 1
            if i % 100 == 0: # every 100 iterations of our algorithm 
                if rej_count > 1000 : # if we've rejected things too much... 
                    if lpf/len(text) < -3.0 and lpf_rej_count < 5:
                        lpf_rej_count += 1
                        np.random.shuffle(f) # randomly shuffle our encoding 
                        lpf = None
                    else:
                        converged_states[tuple(f)] = converged_states.get(tuple(f), 0) + 1
                        # otherwise, we think we're good enough and return the encoding we currently have 
                        return
            if i == NUM_SAMPLES:
                # if at the very end of our algorithm (i.e. on the last iteration of the for loop)
                # we give up and get the best guess made so far 
                converged_states[tuple(f)] = converged_states.get(tuple(f), 0) + 1
                return

    # Now, let's get a bunch of guesses of what the encoding might be
    # You can theoretically parallelize this step and generate many proposed encodings
    # but this is running serially for now
    for _ in range(n_samples):
        get_state() 

    # Finally, take the mode of our guesses at the encoding (which one appears most often) 
    f_map = max(converged_states, key = converged_states.get)

    # Get our final decoded text with our f_map (the most guessed encoding) 
    decoded_guess = apply_decode(text_num, f_map) 

    # Write the decoded text to a file so we can read it :) 
    with open(output_file, 'w') as f:
        f.write(decoded_guess)
        f.close()

if __name__ == '__main__':
    # Actually run the algorithm here when file is run...
    # Open and read text
    # You can replace 'ciphertext.txt' with any file you want to decode 
    with open('ciphertext.txt','r') as f:
        ciphertext = f.read()
    # Time the text 
    t = time.time()
    # Decode text and print how long it takes
    decode(ciphertext,'output.txt')
    print(time.time()-t)


